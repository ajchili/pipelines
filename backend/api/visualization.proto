// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/kubeflow/pipelines/backend/api/go_client";
package api;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "backend/api/parameter.proto";
import "backend/api/error.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {
          ref: ".api.Status";
        }
      }
    }
  }
  // Use bearer token for authorizing access to job service.
  // Kubernetes client library(https://kubernetes.io/docs/reference/using-api/client-libraries/)
  // uses bearer token as default for authorization. The section below
  // ensures security definition object is generated in the swagger definition.
  // For more details see https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityDefinitionsObject
  security_definitions: {
    security: {
      key: "Bearer";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "authorization";
      }
    }
  }
  security: {
    security_requirement: {
      key: "Bearer";
      value: {};
    }
  }
};

service VisualizationService {
  rpc GenerateVisualization(GenerateVisualizationRequest) returns (Visualization) {
    option (google.api.http) = {
      post: "/apis/v1beta1/visualizations"
      body: "visualizaiton"
    };
  }
}

// Create visualization by providing the pipeline ID, run ID, component ID,
// type of visualization that is desired, and input data paths. Should a custom
// visualization be specified, the customVisualization field (an array of python
// commands) is also required.
message GenerateVisualizationRequest {
  Visualization visualization = 1;
}

message Visualization {
  // Output. Unique visualization ID. Generated by API server.
  string id = 1;

  // ID of pipeline that visualization is associated with.
  // This is required when creating the pipeline through GenerateVisualization
  // API.
  string pipeline = 2;

  // ID of the run that visualization is associated with.
  // This is required when creating the pipeline through GenerateVisualization
  // API.
  string run = 3;

  // ID of the component that visualization is associated with.
  // This is required when creating the pipeline through GenerateVisualization
  // API.
  string component = 4;

  // Type of visualization to be generated.
  // This is required when creating the pipeline through GenerateVisualization
  // API.
  enum Type {
    CUSTOM = 0;
    ROC_CURVE = 1;
  };
  Type type = 5;

  // Array of paths of data to be used during generation of visualizations.
  // This is required when creating the pipeline through GenerateVisualization
  // API.
  repeated string inputPaths = 6;

  // Array of python commands to be run if a custom visualization is specified.
  // This is required when creating the pipeline through GenerateVisualization
  // API and when type is specified as CUSTOM.
  repeated string customVisualization = 7;

  // In case any error happens when generating visualizations, only
  // visualization ID and the error message are returned. Client has the
  // flexibility of choosing how to handle the error.
  string error = 8;
}